using System;
using System.Threading.Tasks;
using Microsoft.Owin;
using Accord.Imaging;
using System.Runtime.CompilerServices;
using System.Drawing;
using Accord.Imaging.Filters;
using Accord.Math.Geometry;
using Accord.Math;

namespace Accord.Vision
{
    public enum KLTFeatureStatus
    {
        /// <summary>
        /// Successfully tracked
        /// </summary>
        Success,
        /// <summary>
        /// Movement was farther than it could possibly be tracked
        /// </summary>
        Drifted,
        /// <summary>
        /// Movement was out of image bounds
        /// </summary>
        OutOfBounds,
        /// <summary>
        /// Miscellaneous track failure
        /// </summary>
        Failed
        /// <summary>
        /// Feature's error was too large
        /// </summary>
        //LargeError
    }

    public class LKOpticalFlow
    {
        public static void EstimateFlow<TColor>(Image<TColor, float> prevImg, Image<TColor, float> currImg, PointF[] prevFeatures, int windowSize, 
                                                TermCriteria termCriteria, double minEigenValue,
                                                out PointF[] currFeatures, out float[] error, out KLTFeatureStatus[] status,
                                                PointF[] initialEstimate = null)
            where TColor:IColor
        {
            initialEstimate = initialEstimate ?? new PointF[prevFeatures.Length];

            PointF[] _currFeatures = new PointF[prevFeatures.Length];
            KLTFeatureStatus[] _status = new KLTFeatureStatus[prevFeatures.Length];
            float[] _error = new float[prevFeatures.Length];

            Parallel.For(0, prevFeatures.Length, (int featureIdx) =>
            //for (int featureIdx = 0; featureIdx < prevFeatures.Length; featureIdx++)
            {
                PointF currFeature;
                float featureError;
                KLTFeatureStatus featureStatus;

                EstimateFeatureFlow<TColor>(prevImg, currImg, 
                                            prevFeatures[featureIdx], windowSize, 
                                            termCriteria, minEigenValue, 
                                            out currFeature, out featureError, out featureStatus,
                                            initialEstimate[featureIdx]);

                lock (_currFeatures)
                lock(_error)
                lock (_status)
                {
                    _currFeatures[featureIdx] = currFeature;
                    _error[featureIdx] = featureError;
                    _status[featureIdx] = featureStatus;
                }
            });

            currFeatures = _currFeatures;
            error = _error;
            status = _status;
        }

        public static void EstimateFeatureFlow<TColor>(Image<TColor, float> prevImg, Image<TColor, float> currImg,
                                                 PointF prevFeature, int windowSize, 
                                                 TermCriteria termCriteria, double minEigenValue,
                                                 out PointF currFeature, out float featureError, out KLTFeatureStatus featureStatus,
                                                 PointF initialEstimate = default(PointF))
            where TColor:IColor
        {
            minEigenValue = System.Math.Max(1E-4, minEigenValue);
            currFeature = new PointF(prevFeature.X + initialEstimate.X, prevFeature.Y + initialEstimate.Y); //move searching window (used by pyrOpticalFlow)
            featureError = 0;

            var prevFeatureArea = getFeatureArea(prevFeature, windowSize);
            if (isInsideImage(prevFeatureArea, prevImg.Size) == false)
            {
                featureStatus = KLTFeatureStatus.OutOfBounds;
                return;
            }

            var prevPatch = prevImg.GetRectSubPix(prevFeatureArea);
            var AtA = calcHessian(prevPatch);

            //check min eigen-value
            if (hasValidEigenvalues(AtA, windowSize, minEigenValue) == false)
            {
                featureStatus = KLTFeatureStatus.Failed;
                return;
            }

            double det = AtA[0, 0] * AtA[1, 1] - AtA[0, 1] * AtA[0, 1];

            Image<TColor, float> currPatch;
            for (int iter = 0; iter < termCriteria.MaxIterations; iter++)
            {
                var currFeatureArea = getFeatureArea(currFeature, windowSize);
                if (isInsideImage(currFeatureArea, prevImg.Size) == false) // see if it moved outside of the image
                {
                    featureStatus = KLTFeatureStatus.OutOfBounds;
                    return;
                }

                currPatch = currImg.GetRectSubPix(currFeatureArea);

                var Atb = calcE<TColor>(prevPatch, currPatch);

                //solve for D
                var dx = (AtA[1, 1] * Atb[0] - AtA[0, 1] * Atb[1]) / det;
                var dy = (AtA[0, 0] * Atb[1] - AtA[0, 1] * Atb[0]) / det;

                currFeature.X += (float)dx;
                currFeature.Y += (float)dy;

                // see if it has moved more than possible if it is really tracking a target
                // this happens in regions with little texture
                if (System.Math.Abs(currFeature.X - prevFeature.X) > windowSize ||
                    System.Math.Abs(currFeature.Y - prevFeature.Y) > windowSize)
                {
                    featureStatus = KLTFeatureStatus.Drifted;
                    return;
                }

                if (System.Math.Abs(dx) < termCriteria.MinError && System.Math.Abs(dy) < termCriteria.MinError)
                    break;
            }

            //TODO: compute error
            //featureError = (currPatch - prevPatch).Abs().Sum();          

            featureStatus = KLTFeatureStatus.Success;
            return;
        }

        private static double[,] calcHessian<TColor>(Image<TColor, float> prevPatch)
            where TColor: IColor
        {
            var derivX = prevPatch.Sobel(1, 0, 3);
            var derivY = prevPatch.Sobel(0, 1, 3);

            var corrXY = calcImageCorr(derivX, derivY);

            double[,] AtA = new double[,] 
            { 
                { calcImageCorr(derivX, derivX), corrXY                        },
                { corrXY,                        calcImageCorr(derivY, derivY) }
            };

            return AtA;
        }

        private static double[] calcE<TColor>(Image<TColor, float> prevPatch, Image<TColor, float> currPatch/*, RectangleF currArea*/)
            where TColor: IColor
        {
            var derivX = currPatch.Sobel(1, 0, 3);
            var derivY = currPatch.Sobel(0, 1, 3);
            var derivT = currPatch - prevPatch;
             
            double[] Atb = new double[] 
            {
                calcImageCorr(derivX, derivT), calcImageCorr(derivY, derivT)
            };
             
            return Atb;
        }

        private static RectangleF getFeatureArea(PointF location, int winSize)
        {
            int halfWinSize = winSize / 2;

            return new RectangleF
            {
                X = location.X - halfWinSize,
                Y = location.Y - halfWinSize,
                Width = winSize,
                Height = winSize
            };
        }

        private static bool isInsideImage(RectangleF featureArea, Size imageSize)
        {
            if (featureArea.X < 0 || featureArea.Y < 0 ||
                featureArea.Right > imageSize.Width || featureArea.Bottom > imageSize.Height)
            {
                return false;
            }

            return true;
        }

        private static bool hasValidEigenvalues(double[,] AtA, int winSize, double minValidEigenValue)
        {
            var minEigenValue = calcMinEigenValue(AtA);
            minEigenValue /= (winSize * winSize); //normalize (for the threshold)

            if (minEigenValue < minValidEigenValue)
            {
                return false;
            }

            return true;
        }

        private static double calcMinEigenValue(double[,] mat)
        {
            //(a-d)^2 + 4 * b* c
            var discriminant = (mat[0, 0] - mat[1, 1]) * (mat[0, 0] - mat[1, 1]) + 4 * mat[0, 1] * mat[1, 0];

            if (discriminant < 0) //is this necessary ?
            {
                return 0;
            }

            var sqrtDiscriminant = System.Math.Sqrt(discriminant);
            var minRealEigVal = ((mat[0, 0] + mat[1, 1]) - sqrtDiscriminant) / 2;

            return minRealEigVal;
        }

        private static unsafe float calcImageCorr<TColor>(Image<TColor, float> im1, Image<TColor, float> im2)
            where TColor: IColor
        {
            float val = 0;

            int width = im1.Width;
            int height = im1.Height;
            int nChannels = im1.ColorInfo.NumberOfChannels;

            int im1Offset = im1.Stride - im1.Width * im1.ColorInfo.Size;
            int im2Offset = im2.Stride - im2.Width * im2.ColorInfo.Size;

            float* im1Data = (float*)im1.ImageData;
            float* im2Data = (float*)im2.ImageData;

            for (int r = 0; r < height; r++)
            {
                for (int c = 0; c < width; c++)
                {
                    for (int ch = 0; ch < nChannels; ch++)
                    {
                        val += *im1Data * *im2Data;

                        im1Data++;
                        im2Data++;
                    }
                }

                im1Data = (float*)((byte*)im1Data + im1Offset);
                im2Data = (float*)((byte*)im2Data + im2Offset);
            }

            return val;
        }

    }
}

